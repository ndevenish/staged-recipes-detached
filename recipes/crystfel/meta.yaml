# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe
# If your package is python based, we recommend using Grayskull to generate it instead:
# https://github.com/conda-incubator/grayskull

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "crystfel" %}
{% set version = "0.10.1" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://gitlab.desy.de/thomas.white/{{ name }}/-/archive/{{ version }}/{{ name }}-{{ version }}.tar.bz2
  sha256: 035115423778a3849ccadaeadf23487480e625fda92df9dc5f26d4bc1905e636
  folder: crystfel
  patches:
    - 0001_patch_ccp4_source.patch

build:
  skip: true  # [win or osx]
  number: 0

requirements:
  build:
    - {{ compiler('cxx') }}
    - meson
    - ninja
    - cmake
    - pkg-config
    - flex
    - bison
  host:
    - gsl
    - hdf5
    - eigen
    - fftw
    - msgpack-c
    - zlib
  run:
    - msgpack-c
    - libopenblas

test:
  source_files:
    - crystfel/tests
    - _build/tests
  commands:
    - crystfel/tests/process_hkl_check_1 $(which process_hkl)
    - crystfel/tests/process_hkl_check_2 $(which process_hkl)
    - crystfel/tests/process_hkl_check_3 $(which process_hkl)
    - crystfel/tests/process_hkl_check_4 $(which process_hkl)
    - crystfel/tests/partialator_merge_check_1 $(which partialator)
    - crystfel/tests/partialator_merge_check_2 $(which partialator)
    - crystfel/tests/partialator_merge_check_3 $(which partialator)
    - _build/tests/ambi_check
    - _build/tests/cell_check
    - _build/tests/centering_check
    - _build/tests/list_check
    - _build/tests/prediction_gradient_check
    - _build/tests/ring_check
    - _build/tests/symmetry_check
    - _build/tests/transformation_check
    - _build/tests/rational_check
    - _build/tests/spectrum_check
    - _build/tests/cellcompare_check
    - _build/tests/evparse1
    - _build/tests/evparse2
    - _build/tests/evparse3
    - _build/tests/evparse4
    - _build/tests/evparse5
    - _build/tests/evparse6
    - _build/tests/evparse7
    - _build/tests/symop_pars
    - _build/tests/stream_read crystfel/tests/test.stream
    - _build/tests/integration_check
    - _build/tests/prof2d_check
    - _build/tests/ev_enum1 crystfel/tests/ev_enum1.h5 crystfel/tests/ev_enum1.geom
    - _build/tests/ev_enum2 crystfel/tests/ev_enum2.h5 crystfel/tests/ev_enum2.geom
    - _build/tests/ev_enum3 crystfel/tests/ev_enum3.h5 crystfel/tests/ev_enum3.geom
    - _build/tests/wavelength_geom1 crystfel/tests/wavelength_geom.h5 crystfel/tests/wavelength_geom1.geom 1e-10
    - _build/tests/wavelength_geom2 crystfel/tests/wavelength_geom.h5 crystfel/tests/wavelength_geom2.geom 1.3776e-10
    - _build/tests/wavelength_geom3 crystfel/tests/wavelength_geom.h5 crystfel/tests/wavelength_geom3.geom 1.3776e-10
    - _build/tests/wavelength_geom4 crystfel/tests/wavelength_geom.h5 crystfel/tests/wavelength_geom4.geom 1.9687e-12
    - _build/tests/wavelength_geom5 crystfel/tests/wavelength_geom.h5 crystfel/tests/wavelength_geom5.geom 1.9687e-12
    - _build/tests/wavelength_geom6 crystfel/tests/wavelength_geom.h5 crystfel/tests/wavelength_geom6.geom 1.3776e-10
    - _build/tests/wavelength_geom7 crystfel/tests/wavelength_geom.h5 crystfel/tests/wavelength_geom7.geom 1.3776e-10
    - _build/tests/wavelength_geom8 crystfel/tests/wavelength_geom.h5 crystfel/tests/wavelength_geom8.geom 1.9687e-12
    - _build/tests/wavelength_geom9 crystfel/tests/wavelength_geom.h5 crystfel/tests/wavelength_geom9.geom 1.3776e-10
    - _build/tests/wavelength_geom10 crystfel/tests/wavelength_geom.h5 crystfel/tests/wavelength_geom10.geom 1.3776e-10
    - _build/tests/wavelength_geom11 crystfel/tests/wavelength_geom.h5 crystfel/tests/wavelength_geom11.geom 1.125e-10
    - _build/tests/wavelength_geom12 crystfel/tests/wavelength_geom.h5 crystfel/tests/wavelength_geom12.geom 1.125e-10


about:
  home: https://www.desy.de/~twhite/crystfel/
  summary: 'Data processing for serial crystallography'
  description: |
    CrystFEL is a suite of programs for processing (and simulating) Bragg
    diffraction data from "serial crystallography" experiments, often (but
    not always) performed using an X-ray Free-Electron Laser.  Compared to
    rotation data, some of the particular characteristics of such data which
    call for a specialised software suite are:

    - The sliced, rather than integrated, measurement of intensity data.
      Many, if not all reflections are partially integrated.
    - Many patterns (thousands) are required - high throughput is needed.
    - The crystal orientations in each pattern are random and uncorrelated.
    - Merging into lower symmetry point groups may require the resolution
      of indexing ambiguities.
  license: GPL-3.0-or-later
  license_family: GPL
  license_file: crystfel/COPYING
  dev_url: https://gitlab.desy.de/thomas.white/crystfel


extra:
  recipe-maintainers:
    - ndevenish
